grammar SimpleLanguage
  rule program
    spaces 
    'declarations' spaces declarations:declarations? spaces 
    'begin' spaces commands spaces 
    'end'
    spaces <ProgramNode>
  end
  
  rule declarations
    type:'integer' spaces id_seq spaces '.' <DeclarationNode>
  end
  
  rule id_seq
    identifier spaces ',' spaces id_seq <IdentifierSequenceNode> / 
    identifier
  end
  
  rule commands
    (command spaces ';' spaces)+
  end
  
  rule assignment
    identifier spaces ':=' spaces additive <AssignmentNode>
  end

  rule if_then_else_condition
    'if' spaces expression spaces 
    'then'? spaces then_commands:commands spaces
    'else' spaces else_commands:commands spaces
    'end' <IfThenElseConditionNode>
  end
  
  rule if_then_condition
    'if' spaces expression spaces 
    'then'? spaces commands spaces 
    'end' <IfThenConditionNode>
  end

  rule condition
    if_then_else_condition / if_then_condition
  end
  
  rule while_loop
    'while' spaces expression spaces 
    'do'? spaces commands spaces 
    'end' <WhileNode>
  end
  
  rule command
    'skip' <ReadCommandNode> / 
    'read' spaces identifier <ReadCommandNode> / 
    'write' spaces additive <WriteCommandNode> / 
    'exit' spaces number <ExitCommandNode> / 
    assignment / 
    condition / 
    while_loop
  end

  rule spaces
    [\s]*
  end
  
  rule number
    '0' <NumberNode> / 
    [1-9] [0-9]* <NumberNode> 
  end
  
  rule identifier
    [a-zA-Z] [a-zA-Z_0-9]* <IdentifierNode>
  end

  rule additive
    multitive spaces operator:[+-] spaces additive <AdditiveNode> / 
    multitive
  end

  rule multitive
    primary spaces operator:[*/] spaces multitive <MultitiveNode> /
    primary 
  end

  rule primary
    '(' spaces additive spaces ')' / number / identifier
  end

  rule expression
    first_expression:additive spaces [<=>] spaces second_expression:additive <ExpressionNode>
  end
end
